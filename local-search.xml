<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Literature Note - BERT</title>
    <link href="/2022/09/15/Literature%20Note%20-%20BERT/"/>
    <url>/2022/09/15/Literature%20Note%20-%20BERT/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>In this post, I would summarize key points from classic paper <a href="http://arxiv.org/abs/1810.04805">&lt;BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding&gt;</a> following its initial structure.</p><span id="more"></span><blockquote><p>Important Links</p><ul><li><a href="http://arxiv.org/abs/1810.04805">Paper</a></li><li><a href="https://github.com/google-research/bert">Official Code</a></li></ul></blockquote><h2 id="0-Abstract"><a href="#0-Abstract" class="headerlink" title="0. Abstract"></a>0. Abstract</h2><p>Related work: GPT (Radford et al.) &amp; ELMo (Peters et al.)</p><blockquote><p>Fun fact: ELMo &amp; BERT are both character name from Sesame Street</p></blockquote><p>Difference between these two:</p><ul><li><p>GPT - use <strong>left context</strong> for predicting future inputs &lt;-&gt; BERT - use both context</p></li><li><p>ELMo - RNN architecture, need architecture modification &lt;-&gt; BERT - Transformer Architecture, no task-specific architecture modifications needed for downstream tasks.</p></li></ul><p>Advantages:</p><ul><li><p>Conceptually simple</p></li><li><p>Empirically powerful (on specific tasks)</p></li></ul><blockquote><p>Writing tips: State both absolute and relative performance for reader understanding.</p></blockquote><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><ul><li><p>Pre-training language model in NLP area (BERT reused pre-training technique from CV area, advocating later research to follow)</p></li><li><p>Extension to Abstract para 1. Existing strategies for applying pre-trained language representations</p><ul><li><p>Feature-based - ELMo</p></li><li><p>Fine-tuning - GPT</p></li></ul></li><li><p>Limitation on related work</p><ul><li><p>Unidirectional language models restrict pre-trained representations.</p><ul><li>GPT’s left-to-right architecture, “every token can only at- tend to previous tokens in the self-attention layers of the Transformer”</li></ul></li></ul></li><li><p>BERT’s improvement: using bi-directional context &amp; “masked language model”</p></li><li><p>Contributions:</p><ul><li><p>Importance of bidirectional pre-training</p></li><li><p>Reducing task-specific architecture modification need</p></li><li><p><a href="https://github.com/%20google-research/bert">Open-source Repo</a></p></li></ul></li></ul><h2 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2. Related Work"></a>2. Related Work</h2><h3 id="2-1-Unsupervised-Feature-based-approach"><a href="#2-1-Unsupervised-Feature-based-approach" class="headerlink" title="2.1 Unsupervised Feature-based approach"></a>2.1 Unsupervised Feature-based approach</h3><p>ELMo &amp; others.</p><h3 id="2-2-Unsupervised-Fine-tuning-Approaches"><a href="#2-2-Unsupervised-Fine-tuning-Approaches" class="headerlink" title="2.2 Unsupervised Fine-tuning Approaches"></a>2.2 Unsupervised Fine-tuning Approaches</h3><p>GPT &amp; others.</p><h3 id="2-3-Transfer-Learning-from-Supervised-Data"><a href="#2-3-Transfer-Learning-from-Supervised-Data" class="headerlink" title="2.3 Transfer Learning from Supervised Data"></a>2.3 Transfer Learning from Supervised Data</h3><h2 id="3-BERT-Implementation"><a href="#3-BERT-Implementation" class="headerlink" title="3. BERT (Implementation)"></a>3. BERT (Implementation)</h2><ul><li><p>Two steps in BERT’s framework: <em>pre-training</em> and <em>fine-tuning</em>.</p><blockquote><p>Writing tips: Include a brief introduction of supplementary techniques used. (E.g. pre-training &amp; fine-tuning here)</p></blockquote></li></ul><h4 id="3-0-1-Model-architecture"><a href="#3-0-1-Model-architecture" class="headerlink" title="3.0.1 Model architecture"></a>3.0.1 <strong>Model architecture</strong></h4><p>Multi-layer bidirectional [[Transformer]] encoder based on Vaswani et al.(2017) ‘s original implementation in <a href="https://github.com/tensorflow/tensor2tensor">this repo</a>. Guide could be found in <a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html">this article</a>.</p><ul><li><p>$BERT_{BASE} \Rightarrow  L&#x3D;12,H&#x3D;768,A&#x3D;12,Total\ parameters&#x3D;110M$</p><p>  This model is designed to have the same model size as GPT on comparison purposes.</p></li><li><p>$BERT_{LARGE} \Rightarrow  L&#x3D;24,H&#x3D;1024,A&#x3D;16,Total\ parameters&#x3D;340M$</p><p>  where,</p><ul><li>$L$ - number of Transformer blocks</li><li>$H$ - Hidden size</li><li>$A$ - number of self-attention heads</li></ul></li></ul><blockquote><p>In literature, bidirectional transformer is often referred to as a “Transformer encoder”</p></blockquote><h4 id="3-0-2-Input-x2F-Output-Representations"><a href="#3-0-2-Input-x2F-Output-Representations" class="headerlink" title="3.0.2 Input&#x2F;Output Representations"></a>3.0.2 Input&#x2F;Output Representations</h4><ul><li><p>Context</p><p>  To cope with different down-stream tasks, input representation needs to unambiguously represent both a single <strong>sentence</strong> and a pari of sentences in one token <strong>sequence</strong>.</p></li></ul><blockquote><h5 id="Important-definitions"><a href="#Important-definitions" class="headerlink" title="Important definitions"></a>Important definitions</h5><ul><li>Sentence - arbitrary span of contiguous text, rather than an actual linguistic sentence.</li><li>Sequence - input token to BERT.</li></ul></blockquote><ul><li><p>Implementation</p><p>  WordPiece embeddings  (Wu et al., 2016.) WordPiece embeddings cut word into smaller sub-sequence for low frequency words to reduce the size of token vocabulary.</p><p>  Rules:</p><ul><li><p>First token of every sequence &#x3D; <code>[CLS]</code> - Used for classification tasks</p></li><li><p>Packing sentences</p><ul><li><p>Separate using <code>[SEP]</code> (simple mark)</p></li><li><p>Use a learned embedding - summing the token, segement and position embeddings.</p><p>  <img src="https://miro.medium.com/max/1400/0*m_kXt3uqZH9e7H4w.png" alt="BERT-paper-Figure2-BERT-input-representation"></p></li></ul></li></ul></li></ul><h3 id="3-1-Pre-training-BERT"><a href="#3-1-Pre-training-BERT" class="headerlink" title="3.1 Pre-training BERT"></a>3.1 Pre-training BERT</h3><p>BERT’s pre-training uses two <strong>unsupervised</strong> tasks</p><ul><li>Masked Language Model (MLM)</li><li>Next Sentence Prediction (NSP)</li></ul><h4 id="3-1-1-Task-I-Masked-LM"><a href="#3-1-1-Task-I-Masked-LM" class="headerlink" title="3.1.1 Task I: Masked LM"></a>3.1.1 Task I: Masked LM</h4><ul><li><p>Intuition: Bring in contextual information (as ELMo suggests)</p></li><li><p>Task description</p><p>  Mask some percentage of the input tokens at random, and then predict those masked tokens.</p></li><li><p>Task details</p><ul><li>Mask 15% of all WordPiece tokens in each sequence at random.</li><li>To mitigate the mismatch (fine-tuning’s input has no <code>[MASK]</code> token) between pre-training &amp; fine-tuning, masked words are replaced in differently. If the <em>i</em>-th token is chosen, it is replaced with<ol><li><code>[MASK]</code> token - 80% of the time </li><li>a random token - 10% of the time (to add noise into the training data)</li><li>the unchanged token - 10% of the time</li></ol></li></ul></li></ul><blockquote><p><strong>Online demo for this task</strong></p><p>Check out <a href="https://huggingface.co/bert-base-uncased?text=The+goal+of+life+is+%5BMASK%5D.">huggingface’s online impelmentation</a> of BERT base model.</p></blockquote><blockquote><p><strong>Task idea origin</strong></p><p>Cloze task by Taylor.</p></blockquote><h4 id="3-1-2-Task-II-Next-Sentence-Prediction-NSP"><a href="#3-1-2-Task-II-Next-Sentence-Prediction-NSP" class="headerlink" title="3.1.2 Task II: Next Sentence Prediction (NSP)"></a>3.1.2 Task II: Next Sentence Prediction (NSP)</h4><ul><li><p>Intuition: capture sentence relationships for tasks like Question Answering &amp; Natural Language Inference</p></li><li><p>Task description</p><p>  Input two sentences A &amp; B, output a binary label indicates whether B is the next sentence follows A.</p></li><li><p>Details</p><ul><li>Training data construction - 50-50 split of positive &amp; negative samples.</li></ul></li></ul><h4 id="3-1-3-Data-source"><a href="#3-1-3-Data-source" class="headerlink" title="3.1.3 Data source"></a>3.1.3 Data source</h4><blockquote><p>For the pre-training corpus we use the BooksCorpus (800M words) (Zhu et al., 2015) and English Wikipedia (2,500M words). For Wikipedia we extract only the text passages and ignore lists, tables, and headers.</p></blockquote><h3 id="3-2-Fine-tuning-BERT"><a href="#3-2-Fine-tuning-BERT" class="headerlink" title="3.2 Fine-tuning BERT"></a>3.2 Fine-tuning BERT</h3><p>Fine-tuning BERT is the process of reorganize the input sentence into sequence to model different downstream tasks. For each task, plug in the task-specific inputs and outpus is needed and BERT is finetuned [[end-to-end]].</p><blockquote><p> BERT’s fine-tuning is inexpensive. All of the results in the paper can be replicated in at most 1 hour on a single Cloud TPU, or a few hours on a GPU, starting from the exact same pre-trained model.</p></blockquote><h2 id="4-Experiments"><a href="#4-Experiments" class="headerlink" title="4. Experiments"></a>4. Experiments</h2><p>Introduces the way to cope with and the results on different down-stream tasks. For the detail of input format modification and experiment result, please refer to the original paper.</p><ul><li>GLUE</li><li>SQuAD v1.1</li><li>SQuAD v2.0</li><li>SWAG</li></ul><h2 id="5-Ablation-Studies"><a href="#5-Ablation-Studies" class="headerlink" title="5. Ablation Studies"></a>5. Ablation Studies</h2><p>In this section, ablation experiemnt over pre-training tasks, model size and feature-based approach are performed.</p><p>In summary, the ablation study shows </p><ul><li>all proposed pre-training tasks are necessary for improving the model’s performance.</li><li>Increasing the model size coudl lead to continual improvements on large-scale tasks.</li><li>Extracting fixed features from pre-trained model experiment result demonstrates BERT is effective for both fine-tuning &amp; feature based approach</li></ul><blockquote><p>Research tips: It is good practice to perform ablation studies to add explainability to large scale models with different components. #Area&#x2F;Research</p></blockquote><h2 id="6-Conclusion"><a href="#6-Conclusion" class="headerlink" title="6. Conclusion"></a>6. Conclusion</h2><ul><li><p>Rich, unsupervised pre-training is crucial for language understanding.</p></li><li><p>Major contribution: “further generalizing these findings to deep <em>bidirectional</em> architectures, allowing the same pre-trained model to successfully tackle a broad set of NLP tasks.”</p></li><li><p>Limitation: Constrain on generation tasks as bidirectional .</p></li></ul><h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><ol><li>Which two former work does BERT mainly refer to? What’s the advantage(s) of each prior work? What is BERT’s main contribution&#x2F;innovation compared to those work?</li><li>Which two kinds of tasks is BERT divided into?</li><li>Which two kinds of tasks is BERT’s pre-training divided into? What’s the effect of each task?</li><li>What is the advantage and disadvantage of BERT?</li></ol>]]></content>
    
    
    <categories>
      
      <category>Computer Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Artificial Inteliigence</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Embrace the Information Era</title>
    <link href="/2022/03/13/Embrace%20the%20Information%20Era/"/>
    <url>/2022/03/13/Embrace%20the%20Information%20Era/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Though it may sound strange to start embrace the Information Era till now, I wanted to record some of my realizations regarding how to deal with the massive incoming information and how to gain &amp; use information effectively.</p><span id="more"></span><p>When I talk about Information Era, I am not referring to the time when information technology explodes, but after that, when we are overwhelmed by massive information. According to relevant study, modern citizens percieve one million times more information than citizens back in 1000 A.D. The development of all medium and the widespread of personal computer contributes to the astonishing increase of information available. Therefore, I would like to focus on this aspect and demonstrate my understanding and methodology.</p><h2 id="Understanding-of-Information-era"><a href="#Understanding-of-Information-era" class="headerlink" title="Understanding of Information era"></a>Understanding of Information era</h2><h3 id="What-is-information"><a href="#What-is-information" class="headerlink" title="What is information?"></a>What is information?</h3><blockquote><p>Information is from which <strong>data</strong> and <strong>knowledge</strong> can be derived, as data represents values attributed to parameters, and knowledge signifies understanding of real things or abstract concepts.</p></blockquote><h3 id="Characteristic-of-information"><a href="#Characteristic-of-information" class="headerlink" title="Characteristic of information"></a>Characteristic of information</h3><ol><li><p>Information is <strong>infinite</strong>, <strong>quickly-updated</strong></p><p> Compare to the limited time and effort each individual possess, the massive information generated each day and accumulated in the past seems infinite.</p></li><li><p>Different information may be <strong>contradicting</strong></p><p>Due to different perspective and former knowledge, ones could have different views on the same thing. For example, in stock market, it is common that a lot of reviewers have contradicting views on whether the market is bearish or bullish.</p></li><li><p>The capture &amp; storage of information <strong>takes time and effort</strong></p><p> According to its definition, understanding and extracting the useful piece of information need human’s time and effort. Besides, the form of information varies, such as videos, articles, audios, etc. Handling different forms of information also requires individual’s time and effort.</p></li></ol><h2 id="Methodology-in-this-era"><a href="#Methodology-in-this-era" class="headerlink" title="Methodology in this era"></a>Methodology in this era</h2><p>Regarding to the [characteristic of information](### Characteristic of information), I have formed the below methodology.</p><ol><li><p>Be <strong>selective</strong> and make decision with sufficient information</p><p> As the information is infinite, we need to be astute when capturing information. This involves finding relevant information quickly (using search engine) and selecting those important ones that is most suitable for current situation.</p><p> The thought of coming with a ‘perfect’ plan should be abandoned. Since the available information is infinite, you could always use other source to perfect your plan further. The best way to do this would be quickly draft a plan, starting implement it and continue with iterative perfection based on the feedback from your practice.</p></li><li><p>Develop critical thinking and make independent judgments</p><p> Due to the possible conflicting views from different information source, you need to develop the ability of critical thinking. You should evaluate views from different sides, find their reasoning and process, and then based on your experience and knowledge to make a informed decision.</p></li><li><p>Form your own workflow for the capture, organize and induction of information</p></li></ol><h3 id="Capture-info-Search-Engine-Techniques"><a href="#Capture-info-Search-Engine-Techniques" class="headerlink" title="Capture info: Search Engine Techniques"></a>Capture info: Search Engine Techniques</h3><p>According to research, 90% of the people didn’t realize the below usage of search engine. You could customize your search via simple formatting of your query, which would largely reduce the time you find relevant information.</p><ol><li><p>Search for key phrases <code>“”</code></p><p> Wrap up your phrase with <code>“”</code> to search the entire phrase rather than search word by word. </p><p> <img src="https://s2.loli.net/2022/03/16/SxZatqpoQGDlzmE.png" alt="search-engine-keyprases-eg1.png"></p><p> <img src="https://s2.loli.net/2022/03/16/wG9clIuJDi1SdLj.png" alt="search-engine-keypharse-eg2"></p></li><li><p>Exclude key phrases <code>-</code></p><p> Use a <code>-</code> before the keyword you would like to exclude.</p><p> <img src="https://s2.loli.net/2022/03/16/dkmxwOJf98LBrA6.png" alt="search-engine-exclude-eg1"></p><p> <img src="https://s2.loli.net/2022/03/16/4zAqsKpiBSGJEme.png" alt="image-20220315224450069"></p></li><li><p>Searching for synonyms <code>~</code></p><p> Place the <code>~</code> in front of the search term.</p></li><li><p>Using <strong>AND</strong> <strong>OR</strong> logic </p><p> Place keyword <code>AND</code> <code>OR</code> between search terms to indicate whether you want all of them or part of them to appear in the search result.</p></li><li><p>Using <strong>grammar</strong> to filter result</p></li></ol><ul><li><p>Suppose you want to find something in <strong>a particular website</strong>, use the keyword <code>site:</code>. E.g. <code>Awesome Computer Science Courses site:github.com</code></p></li><li><p>Suppose you want to find something in <strong>specific file type</strong>, use the keyword <code>filetype:</code>. E.g. <code>How to take smart notes filetype:pdf</code></p></li><li><p>Suppose you want to find <strong>related websites</strong> (have similar content), use the keyword <code>related:</code>. E.g. </p><p>  <img src="https://s2.loli.net/2022/03/16/YeXLzC4xRskhfPD.png" alt="image-20220315220125781"></p></li><li><p>Suppose you want your search term to appear in the title of the search result, use the keyword <code>intitle:</code>.</p></li></ul><h3 id="Organizing-info-Categorization-and-Using-tools"><a href="#Organizing-info-Categorization-and-Using-tools" class="headerlink" title="Organizing info: Categorization and Using tools"></a>Organizing info: Categorization and Using tools</h3><h4 id="Categorization"><a href="#Categorization" class="headerlink" title="Categorization"></a>Categorization</h4><p>Inspiration of this idea comes from David Allen’s book introducing GTD method. One of the principle in GTD is to collect all the things (to-dos, reference materials, action reminder, etc.) in one place and categorize them later to maintain organized. It is the same for organizing the information you captured. </p><p>To make use of them later, you should categorize them into different categories based on its type (video or article) or its topic. The categorization process would help you find relevant information later.</p><h4 id="Literature-management-tools"><a href="#Literature-management-tools" class="headerlink" title="Literature management tools"></a>Literature management tools</h4><p>As for me, I like to keep a record of the original copy of the information source, such as a journal article or a video, for later review. Therefore the literature management tools (in my case, Zotero) help me a lot.</p><p>With Zotero (or other similar tools like Citavi, endnote), you could </p><ul><li>Capture journal articles using DOIs or ISBN, and websites or blog through browser extension.</li><li>Cite your reference in Microsoft Word, OpenOffice, LibreOffice, etc.</li><li>Sync your references cross-platform</li><li>Manage your notes for different entries</li></ul><h3 id="Extracting-info-Knowledge-management"><a href="#Extracting-info-Knowledge-management" class="headerlink" title="Extracting info: Knowledge management"></a>Extracting info: Knowledge management</h3><p>Only digested information is valuable and reusable. Another name for this would be knowledge. Sometimes you need to express the information in your own language to see if you understand them fully (Feynman method of learning).</p><p>In AI field, knowledge management is implemented using Triples (<code>(Subject,predicate,object)</code> such as <code>(wheel, part of, cars)</code>) and reasoning rules, and these basic units together forms a larger semantic web or knowledge graph. This is some how instructive on how you manage your personal knowledge -&gt; make each note atomic  and then forms a larger repository.</p><p>As for individuals, managing reusable knowledge requires note taking strategies. A field called PKM (Personal Knowledge management) focuses on solve this issue. I would discuss my understanding of PKM and my methodology in a later article.</p>]]></content>
    
    
    <categories>
      
      <category>Informal Essays</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Methodology</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to Cryptography</title>
    <link href="/2022/02/17/Introduction-to-Crypotography/"/>
    <url>/2022/02/17/Introduction-to-Crypotography/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>In this piece of notes, I will give an overview of Crypotography, introduce basic principles and algorithms for symmetric cryptography, assymetric cryptography and Protocols.</p><span id="more"></span><h1 id="Structure-of-Cryptography"><a href="#Structure-of-Cryptography" class="headerlink" title="Structure of Cryptography"></a>Structure of Cryptography</h1><p><img src="https://s2.loli.net/2022/02/18/SMT17RiAEoOHYmv.png" alt="Structure of Cryptography"></p><h2 id="Symmetric-Cryptography"><a href="#Symmetric-Cryptography" class="headerlink" title="Symmetric Cryptography"></a>Symmetric Cryptography</h2><blockquote><p><strong>Same key</strong> for encryption and decryption</p></blockquote><ul><li>Ensures <strong>confidentiality</strong></li><li>Implemented via <strong>block ciphers</strong> or <strong>stream ciphers</strong><ul><li>Lightweight and fast</li><li>Used for general communication</li></ul></li></ul><h3 id="Stream-Ciphers"><a href="#Stream-Ciphers" class="headerlink" title="Stream Ciphers"></a>Stream Ciphers</h3><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><ul><li><p>Initial <strong>seed</strong> key to generate an <strong>infinite keystream</strong> of random bits</p></li><li><p>Using same keystream to encrypt two messages -&gt; easy to break</p><ul><li>A random <em>“number used once”</em> ( <strong>nonce</strong> ) added as additional seed -&gt; ensure keystream is new</li></ul></li><li><p>Message &amp; keystream combined using <strong>XOR</strong> to get the cipher text</p><ul><li>&#x3D;&#x3D;XOR is <strong>reversible</strong> is applied twice&#x3D;&#x3D;, which brings much convenience when decrypt cipher text.</li></ul></li></ul><h4 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h4><ul><li>Encrypting <strong>long continuous streams</strong>, possibly of unknown length</li><li>Extremely <strong>fast</strong> with a <strong>low memory</strong> footprint, ideal for low-power devices</li><li>If designed well, can <strong>seek</strong> to any location in the stream</li></ul><h4 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h4><ul><li>The keystream must <strong>appear statistically random</strong></li><li>You must *<strong>never* reuse a key + nonce</strong></li><li>Stream ciphers <strong>do not protect the ciphertext</strong><ul><li>Therefore, message could be manipulated during transition without breaking confidentiality</li><li>E.g., suppose you are transmitting a message to bank saying A owes you $50. Attacker could either manipulate the amount or the creditor using the same stream ciper or resent the same message to server.</li></ul></li></ul><h3 id="Block-Cipers"><a href="#Block-Cipers" class="headerlink" title="Block Cipers"></a>Block Cipers</h3><h4 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h4><ul><li>Use a key to encrypt a <strong>fixed-size block</strong> of plaintext into a <strong>fixed-size block</strong> of ciphertext<ul><li>Changing and permuting the bits of the block depending on the key</li></ul></li><li>Different lengths of messages can be handled by splitting the message up and padding</li></ul><h4 id="Example-SP-Networks"><a href="#Example-SP-Networks" class="headerlink" title="Example - SP-Networks"></a>Example - SP-Networks</h4><p><a href="https://en.wikipedia.org/wiki/Substitution%E2%80%93permutation_network">Wiki</a></p><ul><li><p>Repeated substitution and permutation</p><p>  <img src="https://s2.loli.net/2022/02/18/DdKNjiPcCJvgkhW.png" alt="SP-Network Example"></p></li><li><p>Key mixing for enhancing security -&gt; Different key for different round</p></li><li><p>Decipher &#x3D; Reverse operation</p></li></ul><h3 id="Symmetric-Algorithms"><a href="#Symmetric-Algorithms" class="headerlink" title="Symmetric Algorithms"></a>Symmetric Algorithms</h3><table><thead><tr><th>Algorithm</th><th>Cipher Type</th><th>Design</th><th>Block Size (bits)</th><th>Speed</th><th>Memory Footprint</th><th>Safe Implementation Difficulty</th><th>Key Sizes (bits)</th></tr></thead><tbody><tr><td>DES</td><td>Block</td><td>Feistel</td><td>64</td><td>Fast</td><td>Low</td><td>Easy</td><td>56</td></tr><tr><td>3DES</td><td>Block</td><td>Feistel</td><td>64</td><td>Slow</td><td>Low</td><td>Easy</td><td>112</td></tr><tr><td>AES</td><td>Block</td><td>SP-Network</td><td>128</td><td>Very fast</td><td>Low-Medium</td><td>Hard</td><td>128&#x2F;192&#x2F;256</td></tr><tr><td>ChaCha20</td><td>Stream</td><td>add-xor-rot</td><td>N&#x2F;A</td><td>Very fast</td><td>Very low</td><td>Easy</td><td>256</td></tr></tbody></table><h2 id="Asymmetric-Cryptography"><a href="#Asymmetric-Cryptography" class="headerlink" title="Asymmetric Cryptography"></a>Asymmetric Cryptography</h2><blockquote><p> Use a <strong>pair</strong> of keys, one public and one private</p></blockquote><h3 id="Public-key-cryptography"><a href="#Public-key-cryptography" class="headerlink" title="Public-key cryptography"></a>Public-key cryptography</h3><h4 id="General-Idea"><a href="#General-Idea" class="headerlink" title="General Idea"></a>General Idea</h4><ul><li>Hinges upon the premise that: <em>It is computationally infeasible to calculate a private from a public key</em></li><li>In practice, it is achieved through <strong>intractable mathematical problem</strong></li></ul><h4 id="Key-exchange"><a href="#Key-exchange" class="headerlink" title="Key exchange"></a>Key exchange</h4><ul><li><p>Diffie-Hellman Key exchange allows two parties to mathematically agree a shared secret over an insecure channel</p></li><li><p>Alice and Bob each uses a public non-reversible Generator with their private keys to generate public key and send it to each other. Using other’s public key and self’s private key, shared secret could be established.</p><p>  <img src="https://s2.loli.net/2022/02/18/S5Ud1z7g3yN2aPl.jpg" alt="Asymmetric-Cryptography-key-exchange"></p></li></ul><h4 id="Public-Key-Encryption"><a href="#Public-Key-Encryption" class="headerlink" title="Public Key Encryption"></a>Public Key Encryption</h4><ul><li>Encryption performed by the <strong>public key</strong> can only be reversed using the <strong>private key</strong></li></ul><h4 id="Digital-Signatures"><a href="#Digital-Signatures" class="headerlink" title="Digital Signatures"></a>Digital Signatures</h4><ul><li>The authenticity of signatures generated by the private key can by verified by the public key</li><li>Steps<ol><li>Server send the original message</li><li>Server use private key to encrypt</li><li>Server send the encrypted message</li><li>User verify using public key</li></ol></li></ul><h3 id="Public-Key-Algorithms"><a href="#Public-Key-Algorithms" class="headerlink" title="Public Key Algorithms"></a>Public Key Algorithms</h3><table><thead><tr><th>Algorithm</th><th>Key Exchange</th><th>Encryption</th><th>Digital Signatures</th><th>Mathematical Problem</th><th>Elliptic Curves?</th><th>Typical key Size (bits)</th><th></th></tr></thead><tbody><tr><td>Diffie-Hellman</td><td>✓</td><td></td><td></td><td>Discrete Logs</td><td>✓</td><td>256</td><td></td></tr><tr><td>RSA</td><td></td><td>✓</td><td>✓</td><td>Integer Factorisation</td><td></td><td>2048&#x2F;4096</td><td></td></tr><tr><td>Elgamal</td><td></td><td>✓</td><td>✓</td><td>Discrete Logs</td><td>✓</td><td>2048</td><td></td></tr><tr><td>DSA</td><td></td><td></td><td>✓</td><td>Discrete Logs</td><td>✓</td><td>256</td><td></td></tr></tbody></table><h2 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h2><blockquote><p>Application of cryptographic algorithms in secure systems</p></blockquote><h3 id="Hash-Functions"><a href="#Hash-Functions" class="headerlink" title="Hash Functions"></a>Hash Functions</h3><ul><li><p>Cryptographic primitive</p></li><li><p>Takes a message of any length, and returns a pseudorandom hash of fixed length</p></li><li><p>Strong hash functions</p><ul><li><p>must appear <strong>random</strong></p></li><li><p>be hard to find collisions – two messages that hash to the same thing</p><p>  <img src="https://s2.loli.net/2022/02/18/tmOYN6ISBkEfVL5.jpg" alt="strong hash funciton example"></p></li></ul><h3 id="Hash-Function-usage"><a href="#Hash-Function-usage" class="headerlink" title="Hash Function usage"></a>Hash Function usage</h3></li></ul><h4 id="Message-Authentication-Codes"><a href="#Message-Authentication-Codes" class="headerlink" title="Message Authentication Codes"></a>Message Authentication Codes</h4><ul><li><p>Provide <strong>integrity</strong> and <strong>authenticity</strong>, not confidentiality</p><ul><li>Protecting system files</li><li>Ensuring messages haven’t been altered</li></ul></li><li><p>Calculate a keyed hash of the message, then append to the end of the message</p><p>  <img src="https://s2.loli.net/2022/02/18/osuM17TI5D4x2pX.png" alt="hash funciton in message authentication"></p></li></ul><h4 id="Digital-Signatures-1"><a href="#Digital-Signatures-1" class="headerlink" title="Digital Signatures"></a>Digital Signatures</h4><ul><li>The use of a hash during the signing process shortens the signature</li><li>More efficient for long messages</li></ul><h4 id="Password-storage"><a href="#Password-storage" class="headerlink" title="Password storage"></a>Password storage</h4><ul><li>Passwords stored hashed to prevent disclosure</li></ul>]]></content>
    
    
    <categories>
      
      <category>Computer Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cryptography</tag>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thinking about Time management</title>
    <link href="/2022/02/16/Thinking-about-time-management/"/>
    <url>/2022/02/16/Thinking-about-time-management/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>In this article, I will talk about my understanding and implementation of time management measures. Moreover, I would introduce some popular concepts of this topic, like GTD, Pomodoros,The Eisenhower Method.</p><span id="more"></span><h2 id="Understanding-of-Time-management"><a href="#Understanding-of-Time-management" class="headerlink" title="Understanding of Time management"></a>Understanding of Time management</h2><blockquote><p>What it is? What’s its importance?</p></blockquote><p>Time management is the process of carefully planning time individuals spent on various activities. The aim of the time management is to increase efficiency and productivity. For a simple example, suppose you need to prepare dinner for your family, you need to complete a set of tasks like shopping for groceries, preparing ingridients, cooking, etc. Time management skills tend to help you reduce the overall time spent on all this tasks by arranging them consciously.</p><p>In computer science, the design of operating system provides an abstraction on this topic via CPU scheduling.</p><ul><li>The priorities of tasks resembles the real life situation where some tasks is more urgent than others.</li><li>The overhead of context switch (switching between tasks) is a vivid abstraction of human changing focus.</li><li>For a difficult task (takes more time), it was split into more time slices to complete.</li></ul><h2 id="Popular-Concepts"><a href="#Popular-Concepts" class="headerlink" title="Popular Concepts"></a>Popular Concepts</h2><h3 id="The-Eisenhower-Method"><a href="#The-Eisenhower-Method" class="headerlink" title="The Eisenhower Method"></a>The Eisenhower Method</h3><p>It is a method that utilizes the criteria of importance and urgency to organize priorities and workload. Based on the two criteria, tasks could be categorized into four categories (as in following graph)</p><p><img src="https://s2.loli.net/2022/02/17/SJzlLvZ1HBuCd3y.png" alt="The Eisenhower Matrix"></p><ol><li>Important &amp; Urgent tasks - should be done immediately and in person.</li><li>Important &amp; Not Urgent tasks - should be done at certain dates and in person.</li><li>Unimportant &amp; Urgent tasks - could be delegated.</li><li>Unimportant &amp; Not Urgent tasks - should be dropped.</li></ol><p>In practice, it is not frequently listed but used as a mental model to decide the task’s properties.</p><h3 id="Pomodoros"><a href="#Pomodoros" class="headerlink" title="Pomodoros"></a>Pomodoros</h3><p>This method was originally from Francesco Cirillo’s <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro Technique</a>. It took the name from a Pomodoro - tomato shaped kitchen timer. The “Pomodoro” is defined as the fundamental unit of time to measure tasks’ expected completion time, which is traditionally defined as being 30 minutes long, consisting of 25 minutes of work and 5 minutes of break time.</p><p>Though it may seems stiff to use strict pomodoros, it could actually develop your sense of time and help you record your performance. With continuous using of this technique, you could be more confident in predicting tasks’ completion time. Recoding how many Pomodoros you finished could also be a straight forward metric of evaluating your performance.</p><h3 id="GTD"><a href="#GTD" class="headerlink" title="GTD"></a>GTD</h3><p>This strategy was created by <a href="https://en.wikipedia.org/wiki/David_Allen_(author)">David Allen</a> in his book <a href="https://en.wikipedia.org/wiki/Getting_Things_Done">Getting Things Done</a>. The basic idea of this strategy is to <strong>capture</strong> all unfinished things (projects or tasks), <strong>clarify</strong> them into small actionable tasks with clear goals, organize <strong>them</strong> in appropriate forms (and come up to you at proper time), <strong>review</strong> tasks frequently to update the status and <strong>engage</strong> in these tasks.</p><p>In general, it provides a complete workflow for you to manage all your tasks and projects in a personalized system. Though this system may be hard to build and maintain, from my own experience, it is worthwhile to keep you confident in action decisions.</p><h2 id="My-implementation-of-time-management"><a href="#My-implementation-of-time-management" class="headerlink" title="My implementation of time management"></a>My implementation of time management</h2><p>To start with your time mangement, you frist need to be aware of where you spent your time. I used <code>aTimeLogger</code> to track my everyday activities. This is the start of my time management practice and could provide a clear view of whether you are hard working or playing too much. You could also pick your own time tracking app, just pay attention to the philosophy of the software to make sure they are NOT interruptive of your current activities and time-consuming when recording.</p><img src="https://s2.loli.net/2022/02/22/TtAapD1cR4I7v6g.jpg" alt="aTimeLogger Time Tracker· by BGCI" style="zoom:67%;" /><p>To plan your time carefully and wisely, I used GTD techniques to track all the tasks I need to finish and all the events I need to participate. Following GTD’s principles, I would tag the tasks with its expected context (when would be proper, what tools needed, etc.) and group them with the assoicated project. I have tried plenty of task management apps like Omnifocus (which I am now using), Things 3, TickTick (Used for a long time), Wunderlist, etc. It is hard to give a general suggestion for the choice as different people may have different requirements, just make sure the app you choose helps record your tasks easily, intergrate nicely with your workflow and remind you in appropriate format. </p><p>One more thing to care about, is <strong>DO NOT overmanaging</strong>. I had once fallen into the pitfall of overmanaging myself. I enjoyed listing and categorizing different tasks and projects, trying different apps, perfecting the tag system but just NOT complete many of those tasks. Remember what the name suggest, getting things done, so focus on completing the tasks rather than putting most of your efforts changing their organization.</p><p>In the new information era, another thing has become more valuable than our time, that is, our attention (or effective time). The power of attention has long been discovered by physicist through <a href="https://en.wikipedia.org/wiki/Double-slit_experiment">Double-slit experiment</a>, in which whether observer exists could impact the results of the inference pattern. </p><p><img src="https://s2.loli.net/2022/02/18/xQ3H4IUFnDdfRoB.png" alt="Double-slit experiment"></p><p>Modern business are even using our attention to gain money (through online advertisement). <strong>We need to pay attention to what we paid our attention to.</strong> What you should do, is paying attention to the four things below:</p><ol><li>focusing on valuable things</li><li>relationships, especially intimacy</li><li>finding new trends</li><li>Self development</li></ol><p><strong>Pomodoros</strong> is therefore been introduced to my system to record my attention (though it has way more potentials as introduced above). You could easily track your progress and performance via pomodoro recoding. I am now using <code>Session</code> as the app to record for its elegant visualizations and ease of use.</p>]]></content>
    
    
    <categories>
      
      <category>Informal Essays</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Methodology</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thinking about writing</title>
    <link href="/2022/02/09/Thinking-about-writing/"/>
    <url>/2022/02/09/Thinking-about-writing/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>In this article, I will rethink the importance of writing, and discuss how the tools I used evolved.</p><span id="more"></span><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><ul><li>In information era, the way we express ourselves matters.</li><li>Different thinking pattern could be reflected from the writing.</li><li>Among applications, we could use the most efficient way to express and organize our ideas.</li></ul><h2 id="The-importance-of-writing"><a href="#The-importance-of-writing" class="headerlink" title="The importance of writing"></a>The importance of writing</h2><p>Writing, in its board aspect, is an everyday activity for all of us. However, according to my friends, little of us have ever thought carefully about this activity. Different format we use could help us train different thinking patterns. Different applications we chose could effect the efficiency of expressing ourselves and organizing ideas. It is also an important way for us to exchange serious opinions in a decent manner (like publications).</p><p>Different format could be applied to writing. Within my knowledge, they are plain text (.txt, .word files), hypertext (.html, .md files) and outline (.opml files). Each format has an implication of different thinking pattern. For example, if you use outlining more often than other format, you are tend to be a person with a good sense of the overall picture.If you use hypertext (e.g. markdown) very often, you tend to care about the content more than the format it is presented.</p><p>In Sönke Ahrens’s book <how to take smart notes>, he emphasis the importance of writing: </p><blockquote><p>An idea kept private is as good as one you never had. And a fact no one can reproduce is no fact at all. <strong>Making something public always means to write it down</strong> so it can be read. There is no such thing as a history of unwritten ideas.</p></blockquote><h2 id="My-experience-in-writing"><a href="#My-experience-in-writing" class="headerlink" title="My experience in writing"></a>My experience in writing</h2><p>During my early life, I used Microsoft Word as my main editing tool as this is the only one I am familiar with. The software works fine, however, as I grow older, I tend to realize that I spend a lot of time <strong>editing the format</strong> for different headings and emphasis.</p><p>With my exploartion in computer science, I started to use markdown as the main form of many writings. Markdown is a kind of mark up language, which uses a small set of symbols to realize the formatting. This freed me from doing manual adjustment for different parts of the text and could now focus more on the content. Markdown is also a portable format. The formatting is realized by limited symbols which allows the raw text to be readable.In my university, I have been using markdown to take notes, write reports and draft my dissertation. </p><p>Though markdown itself is a powerful concept, the editor could be of great add on to this kind of writing. I have tried a lot of different markdown editors and now kept mainly two of them (Typora and Obsidian), I will write more about the reasoning of choices I made in a later post.</p><p>As my writing in markdown format increases, I started to realize one drawback for this format. It is more of a connstraint in its methodology rather than software design. Markdown kinds of suggest a <strong>fragmented thinking</strong>, where each piece of markdown note stands for a concept or event solely. Though markdown provides link feature, it is not good for getting the whole picture (say you are taking notes for a course and want to have an overview before exam). This let me to another kind of writing - outlining. </p><p>Compared to putting emphasis on the details, outline writing put an emphasis on the key points or the main topic. It encourages concise language choices which is helpful for letting you know the bigger picture and the key points. Using the outlining tools together with my markdown notes, I could both get an general understanding and have detailed information when refering to my notes.</p><p>Later when I came accross the PKM concept, I began to use Obsidian to manage my markdown notes, which could provide two-way linking between different files. How I implemented my own PKM system using Obsidian could be found in another post.</p>]]></content>
    
    
    <categories>
      
      <category>Informal Essays</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Methodology</tag>
      
      <tag>Writing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to set up a hexo blog</title>
    <link href="/2021/11/28/How-to-set-up-a-hexo-blog/"/>
    <url>/2021/11/28/How-to-set-up-a-hexo-blog/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>In this article, you will find how to set up a hexo blog and deploy it.</p><span id="more"></span><blockquote><p>Special thanks to <a href="https://www.bilibili.com/video/BV1Yb411a7ty">Codesheep’s video</a></p></blockquote><h1 id="0-Pre-requisite"><a href="#0-Pre-requisite" class="headerlink" title="0. Pre-requisite"></a>0. Pre-requisite</h1><p>The most important of all, don’t be afraid of making mistakes!</p><p>To initiate your blog, you will need the libraries below.</p><h2 id="0-1-Node-js"><a href="#0-1-Node-js" class="headerlink" title="0.1 Node.js"></a>0.1 Node.js</h2><p> <a href="https://nodejs.org/en/download/"><code>Download here</code> </a> - suggest LTS version</p><p>To check whether <code>Node.js</code>  was downloaded successfully, type <code>node -v</code> in the terminal window.  If something like <code>v12.18.2</code> is presented with no error message, you are free to go for the next step.</p><blockquote><p>For Windows users, terminal could be invoked by pressing <code>win</code> + <code>R</code>, and then type <code>cmd</code> in the prompt window.</p></blockquote><h2 id="0-2-npm"><a href="#0-2-npm" class="headerlink" title="0.2 npm"></a>0.2 npm</h2><p><code>npm</code> is the default package management tool for <code>Node.js</code>. </p><blockquote><p>For Chinese users, you could switch to the mirror in <code>cnpm</code> for faster downloads. Run the command to install <code>cnpm</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure></blockquote><p>Similar to <code>Node.js</code>, type <code>npm -v</code> to check if it’s installed successfully.</p><h2 id="0-3-Git"><a href="#0-3-Git" class="headerlink" title="0.3 Git"></a>0.3 Git</h2><p><code>git</code> is a version control tool used widely among programming projects. Generally speaking, it could help you keep different versions of your project. </p><p><a href="https://git-scm.com/downloads">Download here</a></p><p>To configure the git globally, you could run the command after installation. In the command, <code>--global</code> would set the following parameters for all git repositories on your computer.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ git config --global user.name &quot;Your Namee&quot;<br>$ git config --global user.email &quot;email@example.com&quot;<br></code></pre></td></tr></table></figure><h2 id="0-4-hexo"><a href="#0-4-hexo" class="headerlink" title="0.4 hexo"></a>0.4 hexo</h2><p>With the package management tool installed, fetch the <code>hexo</code> package using command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ npm install -g hexo<br></code></pre></td></tr></table></figure><p>or:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ cnpm install -g hexo<br></code></pre></td></tr></table></figure><p>Similar to <code>Node.js</code>, type <code>hexo -v</code> to check if it’s installed successfully.</p><h1 id="1-Initiate-blog"><a href="#1-Initiate-blog" class="headerlink" title="1. Initiate blog"></a>1. Initiate blog</h1><ol><li><p>Create a folder</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ mkdir blog<br></code></pre></td></tr></table></figure><p> By default, this <code>blog/</code> folder will be created in <code>/Users/YourUserName/</code> for both Mac and Windows users.</p></li><li><p>Navigate into the folder</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ cd blog<br></code></pre></td></tr></table></figure><p> To check if you are in the right folder, type <code>pwd</code> to check.</p></li><li><p>Initiate your blog</p></li></ol><p>  &#x3D;&#x3D;Make sure you are in the right folder before running command below!&#x3D;&#x3D;</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ sudo hexo init<br></code></pre></td></tr></table></figure><p>  The <code>sudo</code> parameter refers to admin access.</p><ol start="4"><li>Run your blog!</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ hexo s<br></code></pre></td></tr></table></figure><p>  By default, you will see the blog running at <a href="http://localhost:4000/">http://localhost:4000</a></p><h1 id="2-Create-a-new-article"><a href="#2-Create-a-new-article" class="headerlink" title="2. Create a new article"></a>2. Create a new article</h1><p>As indicated in the default blog file <code>helloworld.md</code>, you could use the command below to create a new blog.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo n <span class="hljs-string">&quot;Your artical title&quot;</span><br></code></pre></td></tr></table></figure><p>By default, it will be created in <code>source/_posts</code> folder. For markdown reference, please check <a href="https://commonmark.org/help/">here</a>.</p><p>After writing, use the following command to clean the database and generate static files for local blog.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo clean<br>$ hexo <span class="hljs-keyword">generate</span><br>$ hexo server<br></code></pre></td></tr></table></figure><p>Vist the default link again, you could see the article you just wrote.</p><h1 id="3-Deploy-your-blog"><a href="#3-Deploy-your-blog" class="headerlink" title="3. Deploy your blog"></a>3. Deploy your blog</h1><blockquote><p>You will need a Github account or Gitee accound for deployment.</p></blockquote><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ol><li><p>Create a new repository with the name <code>YourFullUserName.github.io</code> and it has to be set to public.</p></li><li><p>Install a plugin for deployment.</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install <span class="hljs-comment">--save hexo-deployer-git</span><br></code></pre></td></tr></table></figure></li><li><p>Find the <code>_config.yml</code> file in your blog folder, at the end of this file, modify the following content:</p> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">type</span>: <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo</span>: <span class="hljs-string">Your Github repo&#x27;s link</span><br>  <span class="hljs-attr">branch</span>: <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p> Your repo link should end with <code>.github.io.git</code> which you could obtain here.</p><p> <img src="https://i.loli.net/2021/11/28/mQEldKOZv9wsjqc.jpg" alt="Where to find your link"></p></li><li><p>After saving your config file, run command below to deploy your blog.</p> <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><p> You may need to type your user name and password.</p></li><li><p>See you blog online!</p><p> Visit <code>yourUserName.github.io</code></p></li></ol><h2 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h2><p>#TODO</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.bilibili.com/video/BV1Yb411a7ty">Codesheep’s video in Chinese</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>translation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Index System Introduction</title>
    <link href="/2021/09/27/Index%20System%20Introduction/"/>
    <url>/2021/09/27/Index%20System%20Introduction/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>In this article, you will find an brief definition of Index system, how is it useful and how to build one on your own.</p><span id="more"></span><p>Further to my internship experience and my reading on the web, I have concluded some information about  index system.</p><h2 id="1-What-is-Index-System"><a href="#1-What-is-Index-System" class="headerlink" title="1. What is Index System?"></a>1. What is Index System?</h2><p>For example, when deciding whether a company is worth investing,  you would see comments like “This company has too much loans”, “It is not making any profits”. However in data-driven industries (like finance), you need to support your decisions with intuitive evidence. Instead of raw business data, an index should be used for demonstration purposes (e.g. Asset-liability ratio).In the above example, the index of asset-liability ration addresses the company’s debt. </p><p>In real world problem, complicate problem could not be resolved by using one single index (e.g. Evaluating a company’s future profitability), therefore a set of indexes is needed to describe the data subject from different perspectives and lead to a informed decision, that is where index system plays a role.</p><h2 id="2-How-is-index-system-useful"><a href="#2-How-is-index-system-useful" class="headerlink" title="2. How is index system useful?"></a>2. How is index system useful?</h2><p>When evaluating one’s health condition, we tend to use the indicators like body fat percentage, body temperature, blood pressure, etc. Considering these indicators together, one’s health status could then be determined.</p><p>It’s the same when using index system to evaluate a company. When something goes wrong, the index system should be able to reflect this abnormality. Tracing down the problematic index that goes wrong, the current problem in business should be clear. And then the relevant department could have the right direction to improve on.</p><p>In summary, the index system should achieve the following:</p><ol><li>Monitor business situation</li><li>Find problems based on problematic index</li><li>Evaluate business and guide the future work.</li></ol><h2 id="3-How-to-build-an-index-system"><a href="#3-How-to-build-an-index-system" class="headerlink" title="3. How to build an index system?"></a>3. How to build an index system?</h2><p>The general approach is as following:</p><ol><li>Understand company’s &#x2F; department’s Key Performance Indicator (KPI), define Level-1 Index</li><li>Understand the business, dismantle Level-1 Index and define Level-2 Index</li><li>Sort out business processes, dismantle Level-2 Index and define Level-3 Index</li><li>Using reports to monitor index system, update it accordingly</li></ol><h2 id="4-Common-mistakes-when-building-index-system"><a href="#4-Common-mistakes-when-building-index-system" class="headerlink" title="4. Common mistakes when building index system"></a>4. Common mistakes when building index system</h2><ul><li>Not understand the KPI</li><li>No logic relationship between indexes</li><li>Dissembled indexes has no business meaning</li><li>Little or No communication between data department and business department</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/285551902">Zhihu’s passage - How to build an index system by Houzi</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Data Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>translation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Binary search algorithm</title>
    <link href="/2021/09/11/Binary%20search%20algorithm%20Summary/"/>
    <url>/2021/09/11/Binary%20search%20algorithm%20Summary/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>In this post, I will give a brief summary of binary search algorithm, together with some programming problems on this topic.</p><span id="more"></span><h2 id="Algorithm-Introduction"><a href="#Algorithm-Introduction" class="headerlink" title="Algorithm Introduction"></a>Algorithm Introduction</h2><ul><li>It is a simple <strong>recursive</strong> searching algorithm. </li><li>Scope of application: in <strong>ordered</strong> arrays</li></ul><p>The pseudo code<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> is as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">Procedure binary_search<br>   A ← <span class="hljs-built_in">sorted</span> array<br>   n ← size of array<br>   x ← value to be searched<br>   <span class="hljs-type">Set</span> lowerBound = <span class="hljs-number">1</span> <br>   <span class="hljs-type">Set</span> upperBound = n <br>   <span class="hljs-keyword">while</span> x <span class="hljs-keyword">not</span> found <br>    <span class="hljs-keyword">if</span> upperBound &lt; lowerBound <br>EXIT: x does <span class="hljs-keyword">not</span> exists. <br><span class="hljs-built_in">set</span> midPoint = lowerBound + ( upperBound - lowerBound ) / <span class="hljs-number">2</span> <br> <br> <span class="hljs-keyword">if</span> A[midPoint] &lt; x <br> <span class="hljs-built_in">set</span> lowerBound = midPoint + <span class="hljs-number">1</span> <br> <span class="hljs-keyword">if</span> A[midPoint] &gt; x <br> <span class="hljs-built_in">set</span> upperBound = midPoint - <span class="hljs-number">1</span> <br> <span class="hljs-keyword">if</span> A[midPoint] = x <br>         EXIT: x found at location midPoint <br>   end <span class="hljs-keyword">while</span><br></code></pre></td></tr></table></figure><p>In plain words, it recursively check whether the mid point value is the target, if the target is bigger, check the left half; if the target is smaller, check the right half.</p><h3 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h3><ul><li>Space complexity<br>  Only constant number of variables are used, therefore the space complexity is $O(1)$.</li><li>Time complexity<br>  Because each time after search, half of the array would be ‘discarded’, therefore the overall complexity is $O(\log n)$, where $n$ is the length of the array.</li></ul><h2 id="Java-Implementation-example"><a href="#Java-Implementation-example" class="headerlink" title="Java Implementation example"></a>Java Implementation example</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java - Non-recursive version</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = nums.length;<br><span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = n - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br><span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>; <span class="hljs-comment">// Prevent add overflow</span><br><span class="hljs-keyword">if</span> (nums[mid] == target) <span class="hljs-keyword">return</span> mid;<br><span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>left = mid + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>right = mid - <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java - Revursive version</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (start &gt; end)<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> mid = start + (end - start)/<span class="hljs-number">2</span>; <span class="hljs-comment">// Prevent add overflow</span><br>    <span class="hljs-keyword">if</span> (arr[mid] &gt; target)<br>        <span class="hljs-keyword">return</span> binarySearch(arr, start, mid - <span class="hljs-number">1</span>, target);<br>    <span class="hljs-keyword">if</span> (arr[mid] &lt; target)<br>        <span class="hljs-keyword">return</span> binarySearch(arr, mid + <span class="hljs-number">1</span>, end, target);<br>    <span class="hljs-keyword">return</span> mid;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><ol><li><a href="https://leetcode.com/problems/binary-search/">Leetcode 704 - Binary search</a> - Basic implementation for this algorithm.</li><li><a href="https://leetcode.com/problems/first-bad-version/">Leetcode 278 - First bad Version</a> - Variation on look-up standards.</li><li><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/">Leetcode 34 - Find First and Last Position of element in Sorted array </a> - Variation on look-up standards and re-use of code.</li><li><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/">Leetcode 33 - Search in rotated sorted array</a>- Variation on the structure of array.</li><li><a href="https://leetcode.com/problems/search-a-2d-matrix/">Leetcode 74 - Search a 2D matrix</a> - Variation on the structure of input array, need to reduce the dimension of input.</li><li><a href="https://leetcode.com/problems/find-peak-element/">Leetcode 162 - Find peak element</a> - Another realization of binary search algorithm.</li></ol><div id="footnotes"><hr><div id="footnotelist"><ol><li id="fn:1">The pseudo code is derived from <a href="https://www.tutorialspoint.com/data_structures_algorithms/binary_search_algorithm.htm">tutorials point</a><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <categories>
      
      <category>Computer Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intention of this blog</title>
    <link href="/2021/08/18/Intention-of-this-blog/"/>
    <url>/2021/08/18/Intention-of-this-blog/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Aims"><a href="#Aims" class="headerlink" title="Aims"></a>Aims</h2><ul><li>Record feelings and findings during CS study. </li><li>Share my project experience with reproduceble steps.</li><li>Publish notes about courses and libraies.</li></ul><h2 id="To-be-continued…"><a href="#To-be-continued…" class="headerlink" title="To be continued…"></a>To be continued…</h2><p>With more posts, this article will serve as an index page.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Basic Blog Operations</title>
    <link href="/2021/08/17/hello-world/"/>
    <url>/2021/08/17/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Operating System Lecture Notes - Introduction</title>
    <link href="/2020/10/04/OSC%20Lecture%20Notes%20-%20Introduction/"/>
    <url>/2020/10/04/OSC%20Lecture%20Notes%20-%20Introduction/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>In this note, you could find the basic definition of Operating Systems and the general architecture of computer.</p><span id="more"></span><h2 id="Defining-Operating-Systems"><a href="#Defining-Operating-Systems" class="headerlink" title="Defining Operating Systems"></a>Defining Operating Systems</h2><h3 id="What-can-an-OS-do-for-me"><a href="#What-can-an-OS-do-for-me" class="headerlink" title="What can an OS do for me?"></a>What can an OS do for me?</h3><ul><li><p><strong>File systems</strong>: where is the file physically written on the disk and how is it retrieved?</p></li><li><p><strong>Abstraction</strong>: why looks the instruction the same independent of the device?</p></li><li><p><strong>Concurrency</strong>: what if multiple programs access the same file simultaneously? What if an other process starts running?</p></li><li><p><strong>Security</strong>: why is the access denied? Where in memory will the array be stored and how is it protected from unauthorised access?</p></li><li><p>What if the array requires more memory than physically available?</p></li><li><p>What if only part of the array is currently in use ?</p></li></ul><h4 id="What-is-part-of-the-operating-system"><a href="#What-is-part-of-the-operating-system" class="headerlink" title="What is part of the operating system?"></a>What is part of the operating system?</h4><p>Memory management, CPU scheduling, file system, communication, memory management, interrupt handling, GUI, . . . </p><h4 id="A-resource-manager"><a href="#A-resource-manager" class="headerlink" title="A resource manager"></a>A resource manager</h4><ul><li>Many modern operating systems use <strong>multi-programming</strong> to <strong>improve user experience</strong> and <strong>maximize resource utilization</strong><ul><li>Disks are slow: without multi-programming, CPU time is wasted while waiting for I&#x2F;O requests<ul><li>Imagine a CPU running at 3.2 GHz (approx. 3:2 $\times$ 109 instructions per second)</li><li>Imagine a disk rotating at 7200 RPM, taking 4.2 ms to rotate half a track</li><li>I&#x2F;O is slow, we are missing out on 3.2 $\times$  4.2 $\times$ $10^6$ instructions (13.44m)!</li></ul></li></ul></li><li>The implementation of multi-programming has important consequences for operating system design</li><li>The operating system must <strong>allocate&#x2F;share resources</strong> (including CPU, memory, I&#x2F;O devices) fairly and safely between competing processes:<ul><li>In time, e.g. CPUs and printers</li><li>In space, e.g., memory and disks</li></ul></li><li>The execution of multiple programs (processes) needs to be interleaved with one another:<ul><li>This requires context switches and process scheduling ) $\Rightarrow$ mutual exclusion, deadlock avoidance, protection, . .</li></ul></li></ul><h3 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h3><p>In the early days, programmers had to deal directly with the hardware</p><ul><li>Real computer hardware is ugly</li><li>Hardware is extremely difficult to manipulate&#x2F;program</li></ul><p>&#x3D;&#x3D;An operating system is a layer of indirection on top of the hardware&#x3D;&#x3D;:</p><ul><li>It provide <strong>abstractions</strong> for application programs (e.g., file systems)</li><li>It provides a <strong>cleaner and easier interface to the hardware</strong> and hides the complexity of “bare metal”</li><li>It allows the programmer to be lazy by using common routines :-)</li></ul><img src="https://s2.loli.net/2022/01/09/Fi8pODhsMjUYQWe.png" alt="image-20201004095954244" style="zoom:67%;" /><h3 id="Why-study-operating-system"><a href="#Why-study-operating-system" class="headerlink" title="Why study operating system?"></a>Why study operating system?</h3><ul><li>The programs that we write <strong>use operating system functionality</strong></li><li>How are the operating system’s services&#x2F;abstractions implemented</li></ul><h2 id="Computer-Architecture"><a href="#Computer-Architecture" class="headerlink" title="Computer Architecture"></a>Computer Architecture</h2><img src="https://s2.loli.net/2022/01/09/6zOLWYRhwxfPS48.png" alt="image-20201004100314213" style="zoom:50%;" /><center>Simplified computer model (Tanenbaum, 2014)</center><h3 id="CPU-design"><a href="#CPU-design" class="headerlink" title="CPU design"></a>CPU design</h3><ul><li>CPU’s basic cycle consist of <strong>fetch, decode, and execute</strong> (pipelines, or superscalar)</li><li>Every CPU has his own instruction set</li><li>A CPU has a set of registers (extremely fast memory close to the CPU “core”)<ul><li>Registers are used to <strong>store data and for special functions</strong> (e.g. program counter, program status word – mode bit)</li><li>The <strong>compiler&#x2F;programmer</strong> decides what to keep in the registers</li><li><strong>Context switching</strong> must save and restore the CPU’s internal state, including its registers</li></ul></li></ul><p><img src="https://s2.loli.net/2022/01/09/BXFD78eJvCzyScn.png" alt="image-20201004100845955"></p><h4 id="Memory-management-Unit"><a href="#Memory-management-Unit" class="headerlink" title="Memory management Unit"></a>Memory management Unit</h4><ul><li><p>There are two different address spaces:</p><ul><li>the <strong>logical address space</strong> seen by the process and used by the compiler</li><li>the <strong>physical address space</strong> seen by the hardware&#x2F;OS</li></ul></li><li><p>When compiling code, memory addresses must be assigned to variables and instructions, the compiler does not know what memory addresses will be available in physical memory</p></li><li><p>It will just assume that the code will start running at address 0 when generating the machine code</p>  <img src="https://s2.loli.net/2022/01/09/Ug1EDLKpfQdIZqV.png" alt="image-20201004102110699" style="zoom:67%;" /></li><li><p>On some rare occasions, the process may run at physical address 0</p><ul><li>physical address &#x3D; logical address + 0</li></ul></li><li><p>On other occasions, it will be running at a completely different location in physical memory and an offset is added</p><ul><li>physical address &#x3D; logical address + offset</li></ul></li><li><p>The <code>memory management unit</code>(MMU) is <strong>responsible for address translation</strong> (“adding the offset”)</p><ul><li>Different processes require different address translation (offsets)</li><li>Context switching requires the MMU to be updated (and registers, cache, …)</li></ul></li></ul><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">int</span> iVar = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">10</span>) &#123;<br>        iVar++;<br>        sleep(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address:%u; Value:%d\n&quot;</span>,&amp;iVar, iVar);<br>         i++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>The same addresses will be displayed for <code>iVar</code>. The address printed on the screen is the logical address</li><li>The value for <code>iVar</code> in the first run doesn’t influence the second run’s value</li></ul><h3 id="Moore’s-Law"><a href="#Moore’s-Law" class="headerlink" title="Moore’s Law"></a>Moore’s Law</h3><blockquote><p>“The number of transistors on an integrated circuit (chip) doubles roughly every two years”</p></blockquote><ul><li>Closely linked, but not necessarily related to performance</li><li>Moore’s still continuing, but the “power wall” slows performance improvements of <strong>single core&#x2F;single processor systems</strong><ul><li>A few cores for multiple “programs” is easy to justify</li><li>How to use <strong>massively parallel</strong> computers&#x2F;CPUs&#x2F;many core machines</li><li>Can we extract parallelism automatically, can we implement parallelism at the lowest level (similar to multiprogramming)</li></ul></li></ul><blockquote><p>Lead to multi-core &#x2F; parallel development</p></blockquote><h3 id="Multi-core-hyperthreaded-processors"><a href="#Multi-core-hyperthreaded-processors" class="headerlink" title="Multi-core, hyperthreaded processors"></a>Multi-core, hyperthreaded processors</h3><ul><li><p>Modern CPUs contain multiple cores and are often hyper-threaded</p></li><li><p><strong>Evolution in hardware</strong> has implications on <strong>operating system design</strong></p><ul><li><p>XP did not support <strong>multi processor architectures</strong></p></li><li><p><strong>Process scheduling</strong> needs to account for load balancing and CPU affinity</p></li><li><p>Cache <strong>coherency</strong> becomes important (manage run-time data)</p>  <img src="https://s2.loli.net/2022/01/09/nlVhBsdvXeZO7uJ.png" alt="image-20201004111125457" style="zoom:50%;" /></li></ul></li></ul><blockquote><p>Previous exam: Describe how, in your opinion, recent developments in computer<br>architecture and computer design have influenced operating system design</p></blockquote><h3 id="Timer-Interrupts"><a href="#Timer-Interrupts" class="headerlink" title="Timer Interrupts"></a>Timer Interrupts</h3><ul><li>Interrupts temporarily pause a process’s normal operation</li><li>Different types of interrupts exist, including:<ul><li>Timer interrupts by <strong>CPU clock</strong></li><li><strong>I&#x2F;O interrupts</strong> for <strong>I&#x2F;O completion</strong> or error codes</li><li><strong>Software generated</strong>, e.g. errors and exceptions</li></ul></li><li><strong>Context switches</strong> (i.e. switching between processes) can be initiated by timer interrupts after a “set time”</li></ul><img src="https://s2.loli.net/2022/01/09/lHoSLPmFs6bNGny.png" alt="image-20201004111301287" style="zoom:50%;" /><ol><li>Timer generates an interrupt</li><li>CPU finishes current instruction and tests for interrupt</li><li>Transfer to interrupt service routine<ul><li>Hardware saves current process state (PSW, program counter)</li><li>Set program counter to interrupt service routine</li><li>Save registers and other state information</li></ul></li><li>Carry out interrupt service routine (scheduler)</li><li>Restore next process to run</li></ol>]]></content>
    
    
    <categories>
      
      <category>Computer Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>Operating System</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
